//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\chris gilbert\source\repos\Database\Database\SQLGrammar\SQLGrammar.g4 by ANTLR 4.6.5

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Database.Parsing {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.5")]
[System.CLSCompliant(false)]
public partial class SQLGrammarLexer : Lexer {
	public const int
		T__0=1, SELECT=2, FROM=3, WS=4;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "SELECT", "FROM", "DIGIT", "A", "B", "C", "D", "E", "F", "G", 
		"H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", 
		"V", "W", "X", "Y", "Z", "WS"
	};


	public SQLGrammarLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, "','", null, null, "' '"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, "SELECT", "FROM", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SQLGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2\x6\x89\b\x1\x4"+
		"\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b"+
		"\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4"+
		"\x10\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15"+
		"\t\x15\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A"+
		"\x4\x1B\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 "+
		"\t \x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4"+
		"\x3\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x6\x3\x6\x3\a\x3\a\x3\b\x3\b\x3\t\x3"+
		"\t\x3\n\x3\n\x3\v\x3\v\x3\f\x3\f\x3\r\x3\r\x3\xE\x3\xE\x3\xF\x3\xF\x3"+
		"\x10\x3\x10\x3\x11\x3\x11\x3\x12\x3\x12\x3\x13\x3\x13\x3\x14\x3\x14\x3"+
		"\x15\x3\x15\x3\x16\x3\x16\x3\x17\x3\x17\x3\x18\x3\x18\x3\x19\x3\x19\x3"+
		"\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3"+
		"\x1F\x3\x1F\x3 \x3 \x3 \x3 \x2\x2\x2!\x3\x2\x3\x5\x2\x4\a\x2\x5\t\x2\x2"+
		"\v\x2\x2\r\x2\x2\xF\x2\x2\x11\x2\x2\x13\x2\x2\x15\x2\x2\x17\x2\x2\x19"+
		"\x2\x2\x1B\x2\x2\x1D\x2\x2\x1F\x2\x2!\x2\x2#\x2\x2%\x2\x2\'\x2\x2)\x2"+
		"\x2+\x2\x2-\x2\x2/\x2\x2\x31\x2\x2\x33\x2\x2\x35\x2\x2\x37\x2\x2\x39\x2"+
		"\x2;\x2\x2=\x2\x2?\x2\x6\x3\x2\x1D\x3\x2\x32;\x4\x2\x43\x43\x63\x63\x4"+
		"\x2\x44\x44\x64\x64\x4\x2\x45\x45\x65\x65\x4\x2\x46\x46\x66\x66\x4\x2"+
		"GGgg\x4\x2HHhh\x4\x2IIii\x4\x2JJjj\x4\x2KKkk\x4\x2LLll\x4\x2MMmm\x4\x2"+
		"NNnn\x4\x2OOoo\x4\x2PPpp\x4\x2QQqq\x4\x2RRrr\x4\x2SSss\x4\x2TTtt\x4\x2"+
		"UUuu\x4\x2VVvv\x4\x2WWww\x4\x2XXxx\x4\x2YYyy\x4\x2ZZzz\x4\x2[[{{\x4\x2"+
		"\\\\||m\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\a\x3\x2\x2\x2\x2?\x3\x2"+
		"\x2\x2\x3\x41\x3\x2\x2\x2\x5\x43\x3\x2\x2\x2\aJ\x3\x2\x2\x2\tO\x3\x2\x2"+
		"\x2\vQ\x3\x2\x2\x2\rS\x3\x2\x2\x2\xFU\x3\x2\x2\x2\x11W\x3\x2\x2\x2\x13"+
		"Y\x3\x2\x2\x2\x15[\x3\x2\x2\x2\x17]\x3\x2\x2\x2\x19_\x3\x2\x2\x2\x1B\x61"+
		"\x3\x2\x2\x2\x1D\x63\x3\x2\x2\x2\x1F\x65\x3\x2\x2\x2!g\x3\x2\x2\x2#i\x3"+
		"\x2\x2\x2%k\x3\x2\x2\x2\'m\x3\x2\x2\x2)o\x3\x2\x2\x2+q\x3\x2\x2\x2-s\x3"+
		"\x2\x2\x2/u\x3\x2\x2\x2\x31w\x3\x2\x2\x2\x33y\x3\x2\x2\x2\x35{\x3\x2\x2"+
		"\x2\x37}\x3\x2\x2\x2\x39\x7F\x3\x2\x2\x2;\x81\x3\x2\x2\x2=\x83\x3\x2\x2"+
		"\x2?\x85\x3\x2\x2\x2\x41\x42\a.\x2\x2\x42\x4\x3\x2\x2\x2\x43\x44\x5/\x18"+
		"\x2\x44\x45\x5\x13\n\x2\x45\x46\x5!\x11\x2\x46G\x5\x13\n\x2GH\x5\xF\b"+
		"\x2HI\x5\x31\x19\x2I\x6\x3\x2\x2\x2JK\x5\x15\v\x2KL\x5-\x17\x2LM\x5\'"+
		"\x14\x2MN\x5#\x12\x2N\b\x3\x2\x2\x2OP\t\x2\x2\x2P\n\x3\x2\x2\x2QR\t\x3"+
		"\x2\x2R\f\x3\x2\x2\x2ST\t\x4\x2\x2T\xE\x3\x2\x2\x2UV\t\x5\x2\x2V\x10\x3"+
		"\x2\x2\x2WX\t\x6\x2\x2X\x12\x3\x2\x2\x2YZ\t\a\x2\x2Z\x14\x3\x2\x2\x2["+
		"\\\t\b\x2\x2\\\x16\x3\x2\x2\x2]^\t\t\x2\x2^\x18\x3\x2\x2\x2_`\t\n\x2\x2"+
		"`\x1A\x3\x2\x2\x2\x61\x62\t\v\x2\x2\x62\x1C\x3\x2\x2\x2\x63\x64\t\f\x2"+
		"\x2\x64\x1E\x3\x2\x2\x2\x65\x66\t\r\x2\x2\x66 \x3\x2\x2\x2gh\t\xE\x2\x2"+
		"h\"\x3\x2\x2\x2ij\t\xF\x2\x2j$\x3\x2\x2\x2kl\t\x10\x2\x2l&\x3\x2\x2\x2"+
		"mn\t\x11\x2\x2n(\x3\x2\x2\x2op\t\x12\x2\x2p*\x3\x2\x2\x2qr\t\x13\x2\x2"+
		"r,\x3\x2\x2\x2st\t\x14\x2\x2t.\x3\x2\x2\x2uv\t\x15\x2\x2v\x30\x3\x2\x2"+
		"\x2wx\t\x16\x2\x2x\x32\x3\x2\x2\x2yz\t\x17\x2\x2z\x34\x3\x2\x2\x2{|\t"+
		"\x18\x2\x2|\x36\x3\x2\x2\x2}~\t\x19\x2\x2~\x38\x3\x2\x2\x2\x7F\x80\t\x1A"+
		"\x2\x2\x80:\x3\x2\x2\x2\x81\x82\t\x1B\x2\x2\x82<\x3\x2\x2\x2\x83\x84\t"+
		"\x1C\x2\x2\x84>\x3\x2\x2\x2\x85\x86\a\"\x2\x2\x86\x87\x3\x2\x2\x2\x87"+
		"\x88\b \x2\x2\x88@\x3\x2\x2\x2\x3\x2\x3\x2\x3\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Database.Parsing
