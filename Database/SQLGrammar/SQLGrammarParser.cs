//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\chris gilbert\source\repos\Database\Database\SQLGrammar\SQLGrammar.g4 by ANTLR 4.6.5

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Database.Parsing {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.5")]
[System.CLSCompliant(false)]
public partial class SQLGrammarParser : Parser {
	public const int
		T__0=1, SELECT=2, FROM=3, WS=4, A=5;
	public const int
		RULE_dmlstatements = 0, RULE_select_statement = 1, RULE_column_list = 2, 
		RULE_column_element = 3, RULE_column_name = 4, RULE_compileUnit = 5;
	public static readonly string[] ruleNames = {
		"dmlstatements", "select_statement", "column_list", "column_element", 
		"column_name", "compileUnit"
	};

	private static readonly string[] _LiteralNames = {
		null, "','", null, null, "' '"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, "SELECT", "FROM", "WS", "A"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SQLGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public SQLGrammarParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class DmlstatementsContext : ParserRuleContext {
		public Select_statementContext select_statement() {
			return GetRuleContext<Select_statementContext>(0);
		}
		public DmlstatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dmlstatements; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLGrammarListener typedListener = listener as ISQLGrammarListener;
			if (typedListener != null) typedListener.EnterDmlstatements(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLGrammarListener typedListener = listener as ISQLGrammarListener;
			if (typedListener != null) typedListener.ExitDmlstatements(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLGrammarVisitor<TResult> typedVisitor = visitor as ISQLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDmlstatements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DmlstatementsContext dmlstatements() {
		DmlstatementsContext _localctx = new DmlstatementsContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_dmlstatements);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12; select_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_statementContext : ParserRuleContext {
		public ITerminalNode SELECT() { return GetToken(SQLGrammarParser.SELECT, 0); }
		public Column_listContext column_list() {
			return GetRuleContext<Column_listContext>(0);
		}
		public Select_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLGrammarListener typedListener = listener as ISQLGrammarListener;
			if (typedListener != null) typedListener.EnterSelect_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLGrammarListener typedListener = listener as ISQLGrammarListener;
			if (typedListener != null) typedListener.ExitSelect_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLGrammarVisitor<TResult> typedVisitor = visitor as ISQLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_statementContext select_statement() {
		Select_statementContext _localctx = new Select_statementContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_select_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 14; Match(SELECT);
			State = 15; column_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_listContext : ParserRuleContext {
		public Column_elementContext[] column_element() {
			return GetRuleContexts<Column_elementContext>();
		}
		public Column_elementContext column_element(int i) {
			return GetRuleContext<Column_elementContext>(i);
		}
		public Column_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLGrammarListener typedListener = listener as ISQLGrammarListener;
			if (typedListener != null) typedListener.EnterColumn_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLGrammarListener typedListener = listener as ISQLGrammarListener;
			if (typedListener != null) typedListener.ExitColumn_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLGrammarVisitor<TResult> typedVisitor = visitor as ISQLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_listContext column_list() {
		Column_listContext _localctx = new Column_listContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_column_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 17; column_element();
			State = 22;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__0) {
				{
				{
				State = 18; Match(T__0);
				State = 19; column_element();
				}
				}
				State = 24;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_elementContext : ParserRuleContext {
		public Column_nameContext column_name() {
			return GetRuleContext<Column_nameContext>(0);
		}
		public Column_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_element; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLGrammarListener typedListener = listener as ISQLGrammarListener;
			if (typedListener != null) typedListener.EnterColumn_element(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLGrammarListener typedListener = listener as ISQLGrammarListener;
			if (typedListener != null) typedListener.ExitColumn_element(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLGrammarVisitor<TResult> typedVisitor = visitor as ISQLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_elementContext column_element() {
		Column_elementContext _localctx = new Column_elementContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_column_element);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 25; column_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_nameContext : ParserRuleContext {
		public ITerminalNode A() { return GetToken(SQLGrammarParser.A, 0); }
		public Column_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLGrammarListener typedListener = listener as ISQLGrammarListener;
			if (typedListener != null) typedListener.EnterColumn_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLGrammarListener typedListener = listener as ISQLGrammarListener;
			if (typedListener != null) typedListener.ExitColumn_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLGrammarVisitor<TResult> typedVisitor = visitor as ISQLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_nameContext column_name() {
		Column_nameContext _localctx = new Column_nameContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_column_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 27; Match(A);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompileUnitContext : ParserRuleContext {
		public DmlstatementsContext dmlstatements() {
			return GetRuleContext<DmlstatementsContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(SQLGrammarParser.Eof, 0); }
		public CompileUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLGrammarListener typedListener = listener as ISQLGrammarListener;
			if (typedListener != null) typedListener.EnterCompileUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLGrammarListener typedListener = listener as ISQLGrammarListener;
			if (typedListener != null) typedListener.ExitCompileUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLGrammarVisitor<TResult> typedVisitor = visitor as ISQLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompileUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompileUnitContext compileUnit() {
		CompileUnitContext _localctx = new CompileUnitContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_compileUnit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 29; dmlstatements();
			State = 30; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\a#\x4\x2\t\x2\x4"+
		"\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x3\x2\x3\x2\x3\x3\x3"+
		"\x3\x3\x3\x3\x4\x3\x4\x3\x4\a\x4\x17\n\x4\f\x4\xE\x4\x1A\v\x4\x3\x5\x3"+
		"\x5\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\a\x2\x2\x2\b\x2\x2\x4\x2\x6\x2\b\x2"+
		"\n\x2\f\x2\x2\x2\x1D\x2\xE\x3\x2\x2\x2\x4\x10\x3\x2\x2\x2\x6\x13\x3\x2"+
		"\x2\x2\b\x1B\x3\x2\x2\x2\n\x1D\x3\x2\x2\x2\f\x1F\x3\x2\x2\x2\xE\xF\x5"+
		"\x4\x3\x2\xF\x3\x3\x2\x2\x2\x10\x11\a\x4\x2\x2\x11\x12\x5\x6\x4\x2\x12"+
		"\x5\x3\x2\x2\x2\x13\x18\x5\b\x5\x2\x14\x15\a\x3\x2\x2\x15\x17\x5\b\x5"+
		"\x2\x16\x14\x3\x2\x2\x2\x17\x1A\x3\x2\x2\x2\x18\x16\x3\x2\x2\x2\x18\x19"+
		"\x3\x2\x2\x2\x19\a\x3\x2\x2\x2\x1A\x18\x3\x2\x2\x2\x1B\x1C\x5\n\x6\x2"+
		"\x1C\t\x3\x2\x2\x2\x1D\x1E\a\a\x2\x2\x1E\v\x3\x2\x2\x2\x1F \x5\x2\x2\x2"+
		" !\a\x2\x2\x3!\r\x3\x2\x2\x2\x3\x18";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Database.Parsing
